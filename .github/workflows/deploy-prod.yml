name: Deployment 

on:
  release:
    types: [published]

env:
  MYSQL_USERNAME: ${{ secrets.MYSQL_USERNAME }}
  MYSQL_PASSWORD: ${{ secrest.MYSQL_PASSWORD }}
  MYSQL_INSTANCE_NAME: ${{ secrets.MYSQL_INSTANCE_NAME }}
  MYSQL_PORT_3306_TCP_ADDR: ${{ secrets.MYSQL_PORT_3306_TCP_ADDR }}
  MYSQL_PORT_3306_TCP_PORT: ${{ secrets.MYSQL_PORT_3306_TCP_PORT }}
  KUBECONFIG: ${{ secrets.KUBECONFIG }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  SSH_USERNAME: app-user
  SSH_HOST: ${{ secrets.SSH_HOST }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - uses: benjlevesque/short-sha@v2.1
        id: short-sha
        with:
          length: 6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker
      
      - name: Build, tag, and push the image to Amazon ECR
        id: build-client-user-image
        uses: docker/build-push-action@v2
        with:
          build_args: |
            MYSQL_USERNAME=${{ env.MYSQL_USERNAME }}
            MYSQL_PASSWORD=${{ env.MYSQL_PASSWORD }}
            MYSQL_INSTANCE_NAME=${{ env.MYSQL_INSTANCE_NAME }}
            MYSQL_PORT_3306_TCP_ADDR=${{ env.MYSQL_PORT_3306_TCP_ADDR }}
            MYSQL_PORT_3306_TCP_PORT=${{ env.MYSQL_PORT_3306_TCP_PORT }}
          context: .
          file: Dockerfile
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/demo-app:${{ steps.short-sha.outputs.sha }}
            ${{ steps.login-ecr.outputs.registry }}/demo-app:latest
          push: true
          
  deploy:
   runs-on: ubuntu-latest
   steps:
      - uses: actions/checkout@v3
      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          sudo mv kustomize /usr/local/bin
      - name: Deploy to Kubernetes
        env:
          KUSTOMIZE_BASE: ./k8s/base
          KUSTOMIZE_OVERLAY: ./k8s/overlays/production
        run: |
          mkdir -p ~/.kube
          echo "${{ env.KUBECONFIG }}" | base64 -d > ~/.kube/config
          kustomize edit set image ${{ steps.login-ecr.outputs.registry }}/demo-app:${{ steps.short-sha.outputs.sha }}
          kustomize build "${{ env.KUSTOMIZE_BASE }}" > deployment.yaml
          kustomize build "${{ env.KUSTOMIZE_OVERLAY }}" >> deployment.yaml
          scp -o StrictHostKeyChecking=no -i <(echo "${{ secrets.SSH_PRIVATE_KEY }}") deployment.yaml ${{ env.SSH_USERNAME }}@${{ env.SSH_HOST }}:/home/${{ env.SSH_USERNAME }}/deployment.yaml
          ssh -o StrictHostKeyChecking=no -i <(echo "${{ secrets.SSH_PRIVATE_KEY }}") ${{ env.SSH_USERNAME }}@${{ env.SSH_HOST }} "kubectl apply -f /home/${{ env.SSH_USERNAME }}/deployment.yaml"